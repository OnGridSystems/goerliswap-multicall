{
  "address": "0xF6d8b02D83D01b5879fCB4092B9c285871Ab4Fa1",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc29bcd00860bb8c00e8c74959cb1a1c37c0bfb62c844f357627669f1605a0e1b",
  "receipt": {
    "to": null,
    "from": "0x6beC61340fA6781cac9Cd039964E2067F4c1f468",
    "contractAddress": "0xF6d8b02D83D01b5879fCB4092B9c285871Ab4Fa1",
    "transactionIndex": 0,
    "gasUsed": "646929",
    "logsBloom": "0x
    "blockHash": "0x99c02670ab70a8edeb21a86eb4b1790e9aea6a52cd18b24354c979589037035a",
    "transactionHash": "0xc29bcd00860bb8c00e8c74959cb1a1c37c0bfb62c844f357627669f1605a0e1b",
    "logs": [],
    "blockNumber": 12,
    "cumulativeGasUsed": "646929",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2d7839bed640f6bb10e940a61593a9c9",
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall2.sol\":{\"content\":\"pragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n            require(success, \\\"Multicall aggregate: call failed\\\");\\n            returnData[i] = ret;\\n        }\\n    }\\n    function blockAndAggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(true, calls);\\n    }\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(blockNumber);\\n    }\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\n        difficulty = block.difficulty;\\n    }\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\n        timestamp = block.timestamp;\\n    }\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n    function tryAggregate(bool requireSuccess, Call[] memory calls) public returns (Result[] memory returnData) {\\n        returnData = new Result[](calls.length);\\n        for(uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\n\\n            if (requireSuccess) {\\n                require(success, \\\"Multicall2 aggregate: call failed\\\");\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls) public returns (uint256 blockNumber, bytes32 blockHash, Result[] memory returnData) {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\\n\",\"keccak256\":\"0xd9f3b262c2ef50003abb169be2277ac916401fe4c9b2a0524e161b3495c996be\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610abe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806372425d9d1161007157806372425d9d1461013d57806386d516e814610145578063a8b0574e1461014d578063bce38bd714610162578063c3077fa914610182578063ee82ac5e14610195576100b4565b80630f28c97d146100b9578063252dba42146100d757806327e86d6e146100f8578063399542e91461010057806342cbb15c146101225780634d2301cc1461012a575b600080fd5b6100c16101a8565b6040516100ce91906108ea565b60405180910390f35b6100ea6100e53660046105f3565b6101ac565b6040516100ce929190610918565b6100c16102d6565b61011361010e366004610628565b6102df565b6040516100ce93929190610938565b6100c16102f7565b6100c16101383660046105cd565b6102fb565b6100c1610308565b6100c161030c565b610155610310565b6040516100ce91906108cb565b610175610170366004610628565b610314565b6040516100ce91906108d9565b6101136101903660046105f3565b610453565b6100c16101a336600461067a565b610470565b4290565b6000606043915082516040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156102d0576000606085838151811061020757fe5b6020026020010151600001516001600160a01b031686848151811061022857fe5b60200260200101516020015160405161024191906108bf565b6000604051808303816000865af19150503d806000811461027e576040519150601f19603f3d011682016040523d82523d6000602084013e610283565b606091505b5091509150816102ae5760405162461bcd60e51b81526004016102a590610908565b60405180910390fd5b808484815181106102bb57fe5b602090810291909101015250506001016101ee565b50915091565b60001943014090565b43804060606102ee8585610314565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815160405190808252806020026020018201604052801561035157816020015b61033e610474565b8152602001906001900390816103365790505b50905060005b825181101561044c576000606084838151811061037057fe5b6020026020010151600001516001600160a01b031685848151811061039157fe5b6020026020010151602001516040516103aa91906108bf565b6000604051808303816000865af19150503d80600081146103e7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ec565b606091505b5091509150851561041457816104145760405162461bcd60e51b81526004016102a5906108f8565b604051806040016040528083151581526020018281525084848151811061043757fe5b60209081029190910101525050600101610357565b5092915050565b60008060606104636001856102df565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b803561049781610a52565b92915050565b600082601f8301126104ae57600080fd5b81356104c16104bc8261098c565b610965565b81815260209384019390925082018360005b838110156104ff57813586016104e98882610563565b84525060209283019291909101906001016104d3565b5050505092915050565b803561049781610a69565b600082601f83011261052557600080fd5b81356105336104bc826109ad565b9150808252602083016020830185838301111561054f57600080fd5b61055a838284610a0c565b50505092915050565b60006040828403121561057557600080fd5b61057f6040610965565b9050600061058d848461048c565b825250602082013567ffffffffffffffff8111156105aa57600080fd5b6105b684828501610514565b60208301525092915050565b803561049781610a72565b6000602082840312156105df57600080fd5b60006105eb848461048c565b949350505050565b60006020828403121561060557600080fd5b813567ffffffffffffffff81111561061c57600080fd5b6105eb8482850161049d565b6000806040838503121561063b57600080fd5b60006106478585610509565b925050602083013567ffffffffffffffff81111561066457600080fd5b6106708582860161049d565b9150509250929050565b60006020828403121561068c57600080fd5b60006105eb84846105c2565b60006106a483836107a7565b9392505050565b60006106a4838361088a565b6106c0816109ed565b82525050565b60006106d1826109db565b6106db81856109df565b9350836020820285016106ed856109d5565b8060005b85811015610727578484038952815161070a8582610698565b9450610715836109d5565b60209a909a01999250506001016106f1565b5091979650505050505050565b600061073f826109db565b61074981856109df565b93508360208202850161075b856109d5565b8060005b85811015610727578484038952815161077885826106ab565b9450610783836109d5565b60209a909a019992505060010161075f565b6106c0816109f8565b6106c0816109fd565b60006107b2826109db565b6107bc81856109df565b93506107cc818560208601610a18565b6107d581610a48565b9093019392505050565b60006107ea826109db565b6107f481856109e8565b9350610804818560208601610a18565b9290920192915050565b600061081b6021836109df565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c658152601960fa1b602082015260400192915050565b600061085e6020836109df565b7f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564815260200192915050565b8051600090604084019061089e8582610795565b50602083015184820360208601526108b682826107a7565b95945050505050565b60006106a482846107df565b6020810161049782846106b7565b602080825281016106a48184610734565b60208101610497828461079e565b602080825281016104978161080e565b6020808252810161049781610851565b60408101610926828561079e565b81810360208301526105eb81846106c6565b60608101610946828661079e565b610953602083018561079e565b81810360408301526108b68184610734565b60405181810167ffffffffffffffff8111828210171561098457600080fd5b604052919050565b600067ffffffffffffffff8211156109a357600080fd5b5060209081020190565b600067ffffffffffffffff8211156109c457600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061049782610a00565b151590565b90565b6001600160a01b031690565b82818337506000910152565b60005b83811015610a33578181015183820152602001610a1b565b83811115610a42576000848401525b50505050565b601f01601f191690565b610a5b816109ed565b8114610a6657600080fd5b50565b610a5b816109f8565b610a5b816109fd56fea365627a7a72315820afad00dd843668998d40eb7dccac4adf42a04dd26ca331ff07965971219fa7616c6578706572696d656e74616cf564736f6c63430005100040",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806372425d9d1161007157806372425d9d1461013d57806386d516e814610145578063a8b0574e1461014d578063bce38bd714610162578063c3077fa914610182578063ee82ac5e14610195576100b4565b80630f28c97d146100b9578063252dba42146100d757806327e86d6e146100f8578063399542e91461010057806342cbb15c146101225780634d2301cc1461012a575b600080fd5b6100c16101a8565b6040516100ce91906108ea565b60405180910390f35b6100ea6100e53660046105f3565b6101ac565b6040516100ce929190610918565b6100c16102d6565b61011361010e366004610628565b6102df565b6040516100ce93929190610938565b6100c16102f7565b6100c16101383660046105cd565b6102fb565b6100c1610308565b6100c161030c565b610155610310565b6040516100ce91906108cb565b610175610170366004610628565b610314565b6040516100ce91906108d9565b6101136101903660046105f3565b610453565b6100c16101a336600461067a565b610470565b4290565b6000606043915082516040519080825280602002602001820160405280156101e857816020015b60608152602001906001900390816101d35790505b50905060005b83518110156102d0576000606085838151811061020757fe5b6020026020010151600001516001600160a01b031686848151811061022857fe5b60200260200101516020015160405161024191906108bf565b6000604051808303816000865af19150503d806000811461027e576040519150601f19603f3d011682016040523d82523d6000602084013e610283565b606091505b5091509150816102ae5760405162461bcd60e51b81526004016102a590610908565b60405180910390fd5b808484815181106102bb57fe5b602090810291909101015250506001016101ee565b50915091565b60001943014090565b43804060606102ee8585610314565b90509250925092565b4390565b6001600160a01b03163190565b4490565b4590565b4190565b6060815160405190808252806020026020018201604052801561035157816020015b61033e610474565b8152602001906001900390816103365790505b50905060005b825181101561044c576000606084838151811061037057fe5b6020026020010151600001516001600160a01b031685848151811061039157fe5b6020026020010151602001516040516103aa91906108bf565b6000604051808303816000865af19150503d80600081146103e7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ec565b606091505b5091509150851561041457816104145760405162461bcd60e51b81526004016102a5906108f8565b604051806040016040528083151581526020018281525084848151811061043757fe5b60209081029190910101525050600101610357565b5092915050565b60008060606104636001856102df565b9196909550909350915050565b4090565b60408051808201909152600081526060602082015290565b803561049781610a52565b92915050565b600082601f8301126104ae57600080fd5b81356104c16104bc8261098c565b610965565b81815260209384019390925082018360005b838110156104ff57813586016104e98882610563565b84525060209283019291909101906001016104d3565b5050505092915050565b803561049781610a69565b600082601f83011261052557600080fd5b81356105336104bc826109ad565b9150808252602083016020830185838301111561054f57600080fd5b61055a838284610a0c565b50505092915050565b60006040828403121561057557600080fd5b61057f6040610965565b9050600061058d848461048c565b825250602082013567ffffffffffffffff8111156105aa57600080fd5b6105b684828501610514565b60208301525092915050565b803561049781610a72565b6000602082840312156105df57600080fd5b60006105eb848461048c565b949350505050565b60006020828403121561060557600080fd5b813567ffffffffffffffff81111561061c57600080fd5b6105eb8482850161049d565b6000806040838503121561063b57600080fd5b60006106478585610509565b925050602083013567ffffffffffffffff81111561066457600080fd5b6106708582860161049d565b9150509250929050565b60006020828403121561068c57600080fd5b60006105eb84846105c2565b60006106a483836107a7565b9392505050565b60006106a4838361088a565b6106c0816109ed565b82525050565b60006106d1826109db565b6106db81856109df565b9350836020820285016106ed856109d5565b8060005b85811015610727578484038952815161070a8582610698565b9450610715836109d5565b60209a909a01999250506001016106f1565b5091979650505050505050565b600061073f826109db565b61074981856109df565b93508360208202850161075b856109d5565b8060005b85811015610727578484038952815161077885826106ab565b9450610783836109d5565b60209a909a019992505060010161075f565b6106c0816109f8565b6106c0816109fd565b60006107b2826109db565b6107bc81856109df565b93506107cc818560208601610a18565b6107d581610a48565b9093019392505050565b60006107ea826109db565b6107f481856109e8565b9350610804818560208601610a18565b9290920192915050565b600061081b6021836109df565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c658152601960fa1b602082015260400192915050565b600061085e6020836109df565b7f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564815260200192915050565b8051600090604084019061089e8582610795565b50602083015184820360208601526108b682826107a7565b95945050505050565b60006106a482846107df565b6020810161049782846106b7565b602080825281016106a48184610734565b60208101610497828461079e565b602080825281016104978161080e565b6020808252810161049781610851565b60408101610926828561079e565b81810360208301526105eb81846106c6565b60608101610946828661079e565b610953602083018561079e565b81810360408301526108b68184610734565b60405181810167ffffffffffffffff8111828210171561098457600080fd5b604052919050565b600067ffffffffffffffff8211156109a357600080fd5b5060209081020190565b600067ffffffffffffffff8211156109c457600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b600061049782610a00565b151590565b90565b6001600160a01b031690565b82818337506000910152565b60005b83811015610a33578181015183820152602001610a1b565b83811115610a42576000848401525b50505050565b601f01601f191690565b610a5b816109ed565b8114610a6657600080fd5b50565b610a5b816109f8565b610a5b816109fd56fea365627a7a72315820afad00dd843668998d40eb7dccac4adf42a04dd26ca331ff07965971219fa7616c6578706572696d656e74616cf564736f6c63430005100040",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}